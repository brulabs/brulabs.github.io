@use "sass:math";

// create an optimized svg url
@function svg-url($svg) {
    // add missing namespace
    @if not str-index($svg,xmlns) {
        $svg: str-replace($svg, '<svg', '<svg xmlns="http://www.w3.org/2000/svg"');
    }

    // chunk up string in order to avoid "stack level too deep" error
    $encoded: '';
    $slice: 2000;
    $index: 0;
    $loops: ceil(math.div(str-length($svg), $slice));

    @for $i from 1 through $loops {
        $chunk: str-slice($svg, $index, $index + $slice - 1);

        // encode
        $chunk: str-replace($chunk, '"', '\'');
        $chunk: str-replace($chunk, '%', '%25');
        $chunk: str-replace($chunk, '#', '%23');
        $chunk: str-replace($chunk, '{', '%7B');
        $chunk: str-replace($chunk, '}', '%7D');
        $chunk: str-replace($chunk, '<', '%3C');
        $chunk: str-replace($chunk, '>', '%3E');

        $encoded: #{$encoded}#{$chunk};
        $index: $index + $slice;
    }

    @return url("data:image/svg+xml,#{$encoded}");
}

@function serialize-breakpoints($breakpoints) {
    $str: '';

    @each $key, $value in $breakpoints {
        $str: $str + $key + '=' + $value + '&';
    }

    @return str-slice($str, 1, -2);
}

@function hexToRGB($hex) {
    @return red($hex), green($hex), blue($hex);
}

@function pow($number, $exp) {
    $return: 1;

    @if $exp > 0 {
        // If the exponent is positive then multiply it
        @for $i from 1 through $exp {
            $return: $return * $number;
        }
    } @else if $exp < 0 {
        // If the number is 0 or negative then divide it
        @for $i from 1 through -$exp {
            $return: math.div($return, $number);
        }
    }

    @return $return;
}

@function modular-scale($exp, $size: $font-size-base, $type-scale: $type-scale) {
    @return pow($type-scale, $exp) * $size;
}

@function strip-unit($number) {
    @return math.div($number, $number * 0 + 1);
}

@function to-rem($value, $base: 16px) {
    @if (unit($value) == 'em') {
        $value: strip-unit($value) * 1rem;
    }

    @if (unit($value) != 'rem') {
        $value: math.div(strip-unit($value), strip-unit($base)) * 1rem;
    }

    @if (strip-unit($value) == 0) {
        $value: 0;
    }

    @return $value;
}

@function str-replace($string, $search, $replace: '') {
    $index: str-index($string, $search);

    @if $index {
        @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
    }

    @return $string;
}

// Usage example:
//
// .icon {
//   background-image: url(get-icon('radio', #fff));
// }
@function get-icon($icon, $color: $icon-color) {
    $color: inspect($color);

    @if (str-index($color, '#') != null) {
        @if map-has-key($icons, $icon) {
            $icon: str-replace('data:image/svg+xml;charset=utf8,' + map-get($icons, $icon), inspect($icon-color), $color);

            @each $char, $encoded in (('<', '%3C'), ('>', '%3E'), ('#', '%23'), ('"', "'")) {
                $icon: str-replace($icon, $char, $encoded);
            }
        } @else {
            @error "Please make sure '#{$icon}' is defined in the $icons map.";
        }
    } @else {
        @error "Please make sure '#{$color}' is a HEX value.";
    }

    @return $icon;
}
